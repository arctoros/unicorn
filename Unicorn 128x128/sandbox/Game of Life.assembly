# cells with fewer than 2 neighbours die
# cells with more than 3 neighbours die
# cells with 2 neighbours live
# cells with 3 neighbours come alive

const random = 1                    # 0: ROM, 1: RNG
const pixel = 6
const mainCell = 5
const neighbourCounter = 4
const currentCell = 3
seti random 2  

label initialize
zer_i 2 ROM
tim null null 1
and_i 1 0x0001 1
jmpi continueInitialize
label ROM
rom pixel null 1                      # load from ROM
label continueInitialize

subi_ 0 1 1
and_i 1 0xF800 1
add 1 pixel 1
dis 1 null null
mem 1 pixel null                   # store pixel in RAM
inc pixel pixel                          # increment pixel pointer
less_ii pixel 2048 initialize           # until entire screen rendered

label mainLoop
del mainCell                           # clear main cell pointer
calli cellLoop                      # count all alive cells
seti 2048 pixel                         # initialize pixel pointer
calli render                        # render screen
jmpi mainLoop                 # repeat forever

label cellLoop
calli left                          # 1 | checking in 
calli down                          # 2 | this pattern:
calli right                         # 3 |
calli right                         # 4 | 8 | 7 | 6
calli up                            # 5 | ---------
calli up                            # 6 | 1 | X | 5
calli left                          # 7 | ---------
calli left                          # 8 | 2 | 3 | 4
calli necromancer                   # decide cell's fortune
psh 1                              # save to render later
del neighbourCounter                        # reset neighbor counter
inc mainCell mainCell                           # increment cell pointer
set mainCell currentCell                           # initialize current pointer
uneql_ii mainCell 2048 cellLoop            # until all cells decided
ret

label left
sub_i currentCell 32 currentCell                       # move one cell left
and_i currentCell 0x07FF currentCell              # wrap, if needed
calli alive                         # check that cell's state
ret

label up
dec currentCell 1                           # move one cell up
and_i 1 0x001F 1              # wrap y position
and_i currentCell 0x07E0 currentCell              # wrap x position
or currentCell 1 currentCell                         # combine positions
calli alive                         # check that cell's state
ret

label right
add_i currentCell 32 currentCell                       # move one cell right
and_i currentCell 0x07FF currentCell              # wrap, if needed
calli alive                         # check that cell's state
ret

label down
inc currentCell 1                           # move one cell down
and_i 1 0x001F 1              # wrap y position
and_i currentCell 0x07E0 currentCell              # wrap x position
or currentCell 1 currentCell                         # combine positions
calli alive                         # check that cell's state
ret

label alive
mem null currentCell 1                      # load currrent cell
and_i 1 0xF800 1              # mask position
zer_i 1 exitAlive                          # rotate 128's to 1's place
inc neighbourCounter neighbourCounter                      # add to counter (only if 1)
label exitAlive
ret

label necromancer
mem null mainCell 1                      # load current cell
less_ii neighbourCounter 2 highwayToHell          # if it's less than 2, ...
grt_ii neighbourCounter 3 highwayToHell           # or more than 3, kill it
eql_ii neighbourCounter 3 comeAlive               # if it's 3, ressurect it
label stayingAlive
ret 
label highwayToHell
and_i 1 0x07FF 1              # killing it
ret
label comeAlive
or_i 1 0xF800 1               # ressurecting it
ret                                 # if it's 2, do nothing                               # if it's 2, do nothing

label render
dec pixel pixel                           # decrement pixel pointer
pop 1                        # load next pixel
dis 1 null null                       # render pixel
mem 1 pixel null                   # save pixel
grt_ii pixel 0 render                # repeat until all rendered
ret